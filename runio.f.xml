<?xml version="1.0" encoding="UTF-8"?>
<forth xmlns="http://forth.org.ru/ForthML/">
<comment>
  2020-10-07 ruv
  An utility to run and wait a Linux process from WineHQ.
  See for details: https://stackoverflow.com/a/45545068/1300170
</comment>


<orthodoxy>
  REQUIRE-WORD /PROCESS_INFORMATION     devel/~pinka/lib/win/process-child.f
  REQUIRE-WORD Wait                     devel/~pinka/lib/multi/Synchr.f
  REQUIRE-WORD LAUNCH                   devel/~pinka/lib/multi/launch.f
  REQUIRE-WORD PARSE-STRING             devel/~pinka/lib/parse-string.f
  REQUIRE-WORD CASE-INS                 lib/ext/caseins.f

  CASE-INS OFF
</orthodoxy>


<g xml:base="http://forth.org.ru/~pinka/">

  <include href="model/trans/rules-slot.f.xml"/>
  <include href="model/data/events-common.f.xml"/>

  <include name="p" href="model/ipc/process-child.f.xml"/>
</g>

<develop wordlist="p">
  <slot-enum> producer-in bufsize error-process-input error-process-output input-empty h-input h-output </slot-enum>
  <init> 4050 bufsize! </init>
  <handler event="cleanup">
    0 error-process-input!
    0 error-process-output!
    <q> 2DROP 0. </q> producer-in!
  </handler>
  <handler event="startup">
    h-input <unless> H-STDIN h-input! </unless>
    h-output <unless> H-STDOUT h-output! </unless>
  </handler>
  <def name="assume-io" ds=" h-in h-out -- ">
    h-output! h-input!
  </def>

  <def name="transmit-stdin" ds=" -- ">
    bufsize ALLOCATED OVER >R <q ds=" a-buf u-buf -- ">
      2>R
        <until> 2R@ producer-in EXECUTE DUP >R put R> 0EQ </until>
      RDROP RDROP
    </q> CATCH
      R> FREE THROW
    THROW
  </def>

  <alias name="assume-producer" word="producer-in!"/>
  <alias name="assume-consumer" word="consumer-out!"/>

  <def name="perform-io" ds=" -- ">
    <choose>
      input-empty <when> 0. put </when>
      <otherwise>
        <q> 'transmit-stdin CATCH error-process-input! </q> LAUNCH
      </otherwise>
    </choose>
    'transmit-stdout CATCH error-process-output!
  </def>

  <def name="perform-io-with" ds=" xt-producer xt-consumer -- ior-input ior-output ">
    assume-consumer assume-producer perform-io
    error-process-input error-process-output
  </def>

  <def name="(perform-io)" ds=" -- ior-input ior-output">
    <q> h-input READOUT-FILE THROW </q>
    <q> h-output WRITE-FILE THROW </q>
    perform-io-with
  </def>

  <def name="runio" ds=" d-txt-commandline -- ior-input ior-output ">
    <fire event="cleanup"/>
    commandline!
    start-simple (perform-io)
  </def>

</develop>


<g title="Switching among stdin/stderr for printing operations">
  <slot-enum>h-stdout-orig</slot-enum>

  <def name="default-to-stderr" ds=" -- ">
    h-stdout-orig <if-exit/>
    H-STDOUT h-stdout-orig!
    H-STDERR 'H-STDOUT BEHAVIOR!
  </def>
  <def name="default-to-stdout" ds=" -- ">
    h-stdout-orig <unless-exit/>
    h-stdout-orig 'H-STDOUT BEHAVIOR!
    0 h-stdout-orig!
  </def>
  <def name="with-normal-output" ds=" xt -- ">
    h-stdout-orig <unless> EXECUTE <exit/></unless>
    default-to-stdout CATCH default-to-stderr THROW
  </def>
</g>


<g title="Some helpers">
  <slot-enum> verbosity </slot-enum>

  <def name="=?" ds=" x1 x2 -- x1 false | true ">
    OVER = DUP <if> NIP </if>
  </def>

  <def name="?show-error-halt" ds=" ior -- "><rem> show the error number and halt if it isn't 0 </rem>
    0   =? <if-exit/>
    109 =? <if-exit/><rem> end of input or output pipe </rem>
    232 =? <if-exit/><rem> pipe is closed </rem>
    233 =? <if-exit/><rem> 0xE9 ERROR_PIPE_NOT_CONNECTED -- No process is on the other end of the pipe </rem>
    <comment>See-also: https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499- </comment>
    <emit>runio error: </emit> . CR
    1 HALT
  </def>

  <def name="runio" ds=" d-txt-commandline -- ">
    p::runio <rem ds=" ior-input ior-output "/>
    verbosity <if>
      >R DUP <if> DUP <emit>runio, info, input  error: </emit> . CR </if>
      R> DUP <if> DUP <emit>runio, info, output error: </emit> . CR </if>
    </if>
    ?show-error-halt ?show-error-halt
  </def>
</g>



<include href="help.f.xml"/>

<wordlist name="option-name" comment="Command line options">

  <def name="--verbose"> 1 verbosity! </def>
  <alias name="-v" word="--verbose"/>

  <def name="--stdin"> FALSE p::input-empty! </def>
  <def name="--no-stdin"> TRUE p::input-empty! </def>
  <alias name="-n" word="--no-stdin"/>

  <def name="--help"> default-to-stdout show-help BYE </def>
  <alias name="-h" word="--help"/>

  <def name="--eval"> PARSE-STRING 'EVALUATE with-normal-output </def>
  <alias name="-e" word="--eval"/>

  <alias name="--chdir" word="--chdir"/>
  <def name="--run"> PARSE-STRING runio </def>

</wordlist>



<g title="Eval command line options">

  <def name="next-option?" ds=" -- d-txt flag ">
    PARSE-NAME DUP <return-false/>
    2DUP `-- EQUALS <if> 2DROP PARSE-NAME FALSE <exit/></if>
    2DUP `- MATCH-HEAD AND 0NE NIP
  </def>

  <def name="eval-options" ds=" d-txt -- d-txt-commandline ">
    <q>
      <repeat> next-option? <while/>
        option-name OBEY <unless>
          <emit>runio error, unknown option: </emit> TYPE CR -13 THROW
        </unless>
      </repeat>
      DROP  0 PARSE  + OVER -
    </q> EVALUATE-WITH
  </def>

  <def name="(eval-commandline)" ds=" -- d-txt-commandline ">
    COMMANDLINE-OPTIONS TRIM  DUP <unless> 2DROP default-to-stdout show-help BYE</unless>
    eval-options
  </def>
</g>



<def name="(main)" ds=" -- ">
  H-STDIN H-STDOUT p::assume-io
  default-to-stderr <fire event="startup"/>
  (eval-commandline) DUP <if> runio </if> BYE
</def>



<init>
  CASE-INS ON
  <fire event="startup"/>
</init>

<def name="--build">
  <q> '(main) CATCH ?show-error-halt BYE </q> MAINX !
  PARSE-STRING DUP <unless>2DROP `runio.exe </unless> SAVE BYE
</def>
<comment>
  The command to build executable:
    forthml runio.f.xml --build runio.exe
</comment>

</forth>
